<!doctype html>
    <!-- content -->
    <header>
        <div id="header-bg"></div>
        <h1 class="main-title">Agastya Kalra</h1>
        <section id="subheader">
            <h2>Chess player,<br> software developer, <br>your AI guy.</h2>
            <nav>
                <ul>
                    <li><a href="/" id="back-link">HOME</a></li>
                </ul>
            </nav>
        </section>
    </header>
    <main>
        <img src= "https://dl.dropboxusercontent.com/u/61478139/KN2.png" style = "width: 100%;" >
        <div class="post-content">
        <h1>Knight's Tour, Part 1: Lists</h1>
        <div class="post-info">
            <h2>December 2015</h2>
            Links: <span class="post-tags"><a href = "/programming/5"> Check out the project! </a></span>
        </div>
        <h2>
      Problem:
    </h2>
    <p>
      Write an algorithm, that can find, given a starting square, a path for the White Knight to go to every square on the chessboard. I also decided that I would do it with brute force, because that is always fun!
    </p>
    <h2>
      Initial Attempt:
    </h2>
    <p>
      So how to go about this problem? My first idea, was to create a list of legal moves, given any size board. Then given the first move, check every possible legal move. Every time a legal move is played, you remove it from a list, when the list of possible moves has been completed, then we know we have found a way.
    </p>
    <h3>
      The Code:
    </h3>
    <code>
      (struct N (c r) #:transparent) <br>
    </code>
    <p>
      This defines the structure, c is the coloumn number, and r is the row number. Next we need to define a function that will give us all the legal moves given the position of the knight<br>
    </p>
    <code>
      (define (moves-list m)<br>
  (let ((a (N-c m)))<br>
    (let ((b (N-r m)))<br>
      (list (N (- a 2) (- b 1)) (N (- a 2) (+ b 1)) (N (+ a 2) (- b 1)) (N (+ a 2) (+ b 1)) (N (- a 1) (- b 2)) (N (- a 1) (+ b 2)) (N (+ a 1) (- b 2)) (N (+ a 1) (+ b 2))))))<br>
    </code>
<p>
This section here takes in the knight position (m), and finds all legal moves around it, returning them in a list. Since this is a calucation, and involves no dynamic programming or loops, but is about 10 steps, which is O(10) or basically constant time, so O(1) time.
The next step is to figure out, how with the dimensions a and b, how to produce a list with every knight move on i.
</p>
<code>
(define (mlist a b c)<br>
  (cond [(= a 0) (mlist c (- b 1) c)]<br>
        [(= b 0) empty]<br>
        [else (cons (N a b) (mlist (sub1 a) b c))]))<br>
</code>
<p>
This takes the dimensions a and b, and c will be set to a, and recurses through the dimensions and produces the initial list of all possible squares. The time complexity of this is pretty irrelevent because this happens only once at the start.
Now we have a simple function that checks to see which moves in one list are in another list, this is used later. Finally we put it all together in main recursive function:
</p>
<code>
(define (k-t lst ms n)<br>
</code>
<p>
This takes in a list of every legal move in the position (lst), a list containing all moves played so far (ms), and the number of total moves that need to be played, (n).
</p>
<code>
(cond [(= n 1) `(())]
</code>
the base case is and list with an empty list, because this function outputs a list of lists, and so if we have reached the number of moves we need to make, we have found a sequence of moves that work, so give it an empty list.
<code>
[(empty? (legal-moves lst (moves-list (first ms)))) empty]<br>
</code>
<p>
if there are no legal moves, then just return an empty list, because we have run out of legal moves to make therefore this is no longer valid. Now the recursive call.
</p>
<code>
[else (foldr (lambda (x r) (append (map (lambda (y) (cons x y)) (k-t (remove x lst) (cons x ms) (- n 1))) r)) empty (legal-moves lst (moves-list (first ms))))]))<br>
</code>
<p>
so foldr takes in a list of legal moves, and to each move, adds calls k-t on the it, while adding it to the accumulator with all of the moves played so far, appending them all together.
This works, but let's take a look at time complexity.
</p>
<h3> Time Complexity </h3>
<p>
  So the main function checks all possible moves starting from a specific point. So if you are trying to figure out how slow, you must break down the recursive call. (legal-moves lst (moves-list (first ms))) would be O(m*n) where n is the number of possible moves, and n is the number of remaining moves. Now since the number of possible moves has a cap for 8, we can take it out and call it O(n) time. <br>
  Next we have the (foldr (lambda (x r) (append (map (lambda (y) (cons x y)) (k-t (remove x lst) (cons x ms) (- n 1))) r)). Well this has a foldr with an append on a map on the recursive call. That's pretty ugly. worst case the recurive call is called a*b times, where a*b is the number of legal moves, for each possible moves. So this becomes O((a*b)^(a*b)) recursive calls, and each call having O(a*b) time. That's pretty rough, and on an 8x8 board, it wouldn't return an answer.
</p>
<a href="https://github.com/kalraA/knights-tour"> Check out the code of the final one! </a>
       </div>
    </main>
    </body>
</htm